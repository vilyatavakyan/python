#1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
result_list = [2, 'text', 456, 45.3, None]
for i in result_list:
    print(f'{i}: type of {type(i)} ')

#2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input().
lst = []

n = int(input("#2.Число элементов: "))

for i in range(0, n):
    ele = input()

    lst.append(ele)

print(lst)

for k in range(0, n//2):
    lst[k*2], lst[k*2+1] = lst[k*2+1], lst[k*2]

print(lst)
#3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.
year_dict = {'Зима': [1, 2, 12], 'Весна': [3, 4, 5], 'Лето': [6, 7, 8], 'Осень': [9, 10, 11]}
year = ['Зима', 'Зима', 'Весна', 'Весна', 'Весна', 'Лето', 'Лето', 'Лето', 'Осень', 'Осень', 'Осень', 'Зима']
month = int(input('#3. Введите номер месяца: '))
print(f'List: {year[month-1]}')
for key in year_dict.keys():
    if month in year_dict[key]:
        print(f'Dict:{key}')
print(year)
#4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
stroka = str(input('#4 Введите строку из слов: '))
list_stroka = stroka.split(' ')
i=0
for m in list_stroka:
    if len(m)<10:
        i+=1
        print(f'{i}. {m}')
    else:
        i += 1
        print(f'{i}. {m[:10]}')

#5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
my_list = [7, 5, 3, 3, 2]
print(f'#5. Рейтинг{my_list}')
chislo_5 = int(input('Введите число: '))
my_list.append(chislo_5)
my_list.sort(reverse=True)
print(my_list)
